{"version":3,"sources":["components/Typeahead/Typeahead.js","index.js"],"names":["Typeahead","props","inputBox","useRef","onAction","current","focus","useState","searchTerm","setSearchTerm","searchResult","setSearchResult","listOpen","setListOpen","inputName","setinputName","list","useEffect","newTerm","split","join","trim","toLowerCase","length","results","filter","color","startsWith","className","onClick","ref","type","value","onChange","event","target","placeholder","onKeyDown","evt","keyCode","map","index","key","tabIndex","substring","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAqJeA,MAjJf,SAAmBC,GAIf,IAAMC,EAAWC,iBAAO,MAClBC,EAAW,WACbF,EAASG,QAAQC,SANC,EAYcC,mBAAS,IAZvB,mBAYfC,EAZe,KAYHC,EAZG,OAekBF,mBAAS,IAf3B,mBAefG,EAfe,KAeDC,EAfC,OAkBUJ,oBAAS,GAlBnB,mBAkBfK,EAlBe,KAkBLC,EAlBK,OAqBYN,mBAAS,iBArBrB,mBAqBfO,EArBe,KAqBJC,EArBI,KA2BhBC,EAAOf,EAAMe,KA8CnB,OA3CAC,qBAAU,WAGN,IAAIC,EAAUV,EAAWW,MAAM,KAAKC,KAAK,IAAIC,OAAOC,cAGpD,GAAIJ,EAAQK,QAAU,GAAKX,EAAU,CACjCG,EAAa,gBAGb,IAAMS,EAAUR,EAAKS,QAAO,SAACC,GAAD,OACxBA,EAAMJ,cAAcK,WAAWT,MAI/BM,EAAQD,QAAU,EAClBZ,EAAgBa,IAKhBb,EAAgB,IAChBE,GAAY,GACZE,EAAa,uBAWjBJ,EAAgB,IAChBE,GAAY,GACZE,EAAa,mBAGlB,CAACP,IAOA,yBAAKoB,UAAU,UAAUC,QAAS,WAC9BhB,GAAY,GACZE,EAAa,mBAGb,yBAAKa,UAAU,aAKX,2BAAOE,IAAK5B,EAAU6B,KAAK,OAAOH,UAAWd,EAAWkB,MAAOxB,EAAYyB,SAAU,SAACC,GAClFzB,EAAcyB,EAAMC,OAAOH,OAC3BnB,GAAY,IAGbuB,YAAY,iBAAiBC,UAAW,SAACC,GACpB,KAAhBA,EAAIC,UACJ1B,GAAY,GACZE,EAAa,sBAMzB,yBAAKa,UAAU,eACVhB,GAGG,yBAAKgB,UAAW,eAAgBlB,EAAa8B,KAAI,SAACd,EAAOe,GAAR,OAG7C,yBAAKb,UAAU,YAAW,uBAAGC,QAAS,WAClChB,GAAY,GACZJ,EAAciB,GACdtB,KAIDiC,UAAW,SAACC,GACS,KAAhBA,EAAIC,UACJ1B,GAAY,GACZJ,EAAciB,GACdtB,KAIgB,KAAhBkC,EAAIC,SACJ1B,GAAY,IAIjB6B,IAAKD,EAAOE,SAAU,GApBC,IAoBG,2BAAInC,GAAgBkB,EAAMkB,UAAUpC,EAAWe,OAAQG,EAAMH,aAvB9F,QC+CpBsB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAE,EAAF,CAAY/B,KAzJG,CACjB,YACA,eACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,kBAQAgC,SAASC,eAAe,U","file":"static/js/main.5e1bb161.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport \"./Typeahead.css\"\n\n// functional component\nfunction Typeahead(props) {\n\n\n    // return focus to input box \n    const inputBox = useRef(null)\n    const onAction = () => {\n        inputBox.current.focus();\n    };\n\n\n\n    // used to keep track of active search term \n    const [searchTerm, setSearchTerm] = useState(\"\")\n\n    // used to compile list of filtered results\n    const [searchResult, setSearchResult] = useState([])\n\n    // used to dictate whether or not the list should be open (list toggler)\n    const [listOpen, setListOpen] = useState(false)\n\n    // used to create interactive styling \n    const [inputName, setinputName] = useState(\"inputBoxClose\")\n\n\n\n\n\n    const list = props.list\n\n    // filter through color list passed in as prop from index.js\n    useEffect(() => {\n\n        // creates updated search term that doesn't have white space or capital letters\n        let newTerm = searchTerm.split(\" \").join(\"\").trim().toLowerCase()\n\n        // checks that updated search term is still longer than 1 character (wasn't just white space) \n        if (newTerm.length >= 1 && listOpen) {\n            setinputName(\"inputBoxOpen\")\n\n            // filter color list with updated search term (whitespace ignored/lowercase) to find matching items \n            const results = list.filter((color) =>\n                color.toLowerCase().startsWith(newTerm)\n            );\n\n            // update search result list as long as there is 1 or more matching term\n            if (results.length >= 1) {\n                setSearchResult(results);\n            }\n\n            // ensures that if the result list is empty, the list display will not appear open\n            else {\n                setSearchResult([])\n                setListOpen(false)\n                setinputName(\"inputBoxClose\")\n            }\n\n\n\n\n        }\n\n\n        // list will close/remain closed if criteria above isn't met\n        else {\n            setSearchResult([])\n            setListOpen(false)\n            setinputName(\"inputBoxClose\")\n        }\n\n    }, [searchTerm]);\n\n\n\n    return (\n\n        // clicking anywhere will close list \n        <div className=\"wrapper\" onClick={() => {\n            setListOpen(false)\n            setinputName(\"inputBoxClose\")\n        }}>\n\n            <div className=\"container\">\n\n                {/* by using a hook to control name of input box, I have more control over styling */}\n                {/* using an on change event, the search term is constantly updating and being used to filter color list*/}\n                {/* <div className=\"testWrapper\" style={{ boxShadow: \"5px 5px 26px -2px rgba(64,142,255,0.98)\" }}> */}\n                <input ref={inputBox} type=\"text\" className={inputName} value={searchTerm} onChange={(event) => {\n                    setSearchTerm(event.target.value)\n                    setListOpen(true)\n\n                    // on key down event closes list if escape key (keycode 27) is pressed \n                }} placeholder=\"begin typing..\" onKeyDown={(evt) => {\n                    if (evt.keyCode === 27) {\n                        setListOpen(false)\n                        setinputName(\"inputBoxClose\")\n\n                    }\n                }} />\n            </div>\n\n            <div className=\"listWrapper\">\n                {listOpen && (\n\n\n                    <div className={\"listDisplay\"}>{searchResult.map((color, index) => (\n\n                        // onclick event closes list, populates the rest of the selected term in the search bar, and returns focus to search bar \n                        <div className=\"listItem\"><p onClick={() => {\n                            setListOpen(false)\n                            setSearchTerm(color)\n                            onAction()\n\n                            // on key down event closes list, populates the rest of the focused term \n                            // in the search bar, and returns focus to search bar if enter key (keycode 13) is pressed \n                        }} onKeyDown={(evt) => {\n                            if (evt.keyCode === 13) {\n                                setListOpen(false)\n                                setSearchTerm(color)\n                                onAction()\n                            }\n\n                            // on key down event closes list if escape key (keycode 27) is pressed \n                            if (evt.keyCode === 27) {\n                                setListOpen(false)\n                            }\n\n                            // displays list item with what user has entered bolded and the remaining letters (substring) unbolded\n                        }} key={index} tabIndex={0}> <b>{searchTerm}</b>{color.substring(searchTerm.length, color.length)}</p></div>\n                    ))} </div>\n\n\n                )}\n                {/* </div> */}\n            </div>\n\n\n\n        </div>\n\n    )\n\n}\n\n\n\nexport default Typeahead\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Typeahead from \"./components/Typeahead/Typeahead\"\n\nconst colorsList = [\n  \"AliceBlue\",\n  \"AntiqueWhite\",\n  \"Aqua\",\n  \"Aquamarine\",\n  \"Azure\",\n  \"Beige\",\n  \"Bisque\",\n  \"Black\",\n  \"BlanchedAlmond\",\n  \"Blue\",\n  \"BlueViolet\",\n  \"Brown\",\n  \"BurlyWood\",\n  \"CadetBlue\",\n  \"Chartreuse\",\n  \"Chocolate\",\n  \"Coral\",\n  \"CornflowerBlue\",\n  \"Cornsilk\",\n  \"Crimson\",\n  \"Cyan\",\n  \"DarkBlue\",\n  \"DarkCyan\",\n  \"DarkGoldenRod\",\n  \"DarkGray\",\n  \"DarkGrey\",\n  \"DarkGreen\",\n  \"DarkKhaki\",\n  \"DarkMagenta\",\n  \"DarkOliveGreen\",\n  \"DarkOrange\",\n  \"DarkOrchid\",\n  \"DarkRed\",\n  \"DarkSalmon\",\n  \"DarkSeaGreen\",\n  \"DarkSlateBlue\",\n  \"DarkSlateGray\",\n  \"DarkSlateGrey\",\n  \"DarkTurquoise\",\n  \"DarkViolet\",\n  \"DeepPink\",\n  \"DeepSkyBlue\",\n  \"DimGray\",\n  \"DimGrey\",\n  \"DodgerBlue\",\n  \"FireBrick\",\n  \"FloralWhite\",\n  \"ForestGreen\",\n  \"Fuchsia\",\n  \"Gainsboro\",\n  \"GhostWhite\",\n  \"Gold\",\n  \"GoldenRod\",\n  \"Gray\",\n  \"Grey\",\n  \"Green\",\n  \"GreenYellow\",\n  \"HoneyDew\",\n  \"HotPink\",\n  \"IndianRed\",\n  \"Indigo\",\n  \"Ivory\",\n  \"Khaki\",\n  \"Lavender\",\n  \"LavenderBlush\",\n  \"LawnGreen\",\n  \"LemonChiffon\",\n  \"LightBlue\",\n  \"LightCoral\",\n  \"LightCyan\",\n  \"LightGoldenRodYellow\",\n  \"LightGray\",\n  \"LightGrey\",\n  \"LightGreen\",\n  \"LightPink\",\n  \"LightSalmon\",\n  \"LightSeaGreen\",\n  \"LightSkyBlue\",\n  \"LightSlateGray\",\n  \"LightSlateGrey\",\n  \"LightSteelBlue\",\n  \"LightYellow\",\n  \"Lime\",\n  \"LimeGreen\",\n  \"Linen\",\n  \"Magenta\",\n  \"Maroon\",\n  \"MediumAquaMarine\",\n  \"MediumBlue\",\n  \"MediumOrchid\",\n  \"MediumPurple\",\n  \"MediumSeaGreen\",\n  \"MediumSlateBlue\",\n  \"MediumSpringGreen\",\n  \"MediumTurquoise\",\n  \"MediumVioletRed\",\n  \"MidnightBlue\",\n  \"MintCream\",\n  \"MistyRose\",\n  \"Moccasin\",\n  \"NavajoWhite\",\n  \"Navy\",\n  \"OldLace\",\n  \"Olive\",\n  \"OliveDrab\",\n  \"Orange\",\n  \"OrangeRed\",\n  \"Orchid\",\n  \"PaleGoldenRod\",\n  \"PaleGreen\",\n  \"PaleTurquoise\",\n  \"PaleVioletRed\",\n  \"PapayaWhip\",\n  \"PeachPuff\",\n  \"Peru\",\n  \"Pink\",\n  \"Plum\",\n  \"PowderBlue\",\n  \"Purple\",\n  \"RebeccaPurple\",\n  \"Red\",\n  \"RosyBrown\",\n  \"RoyalBlue\",\n  \"SaddleBrown\",\n  \"Salmon\",\n  \"SandyBrown\",\n  \"SeaGreen\",\n  \"SeaShell\",\n  \"Sienna\",\n  \"Silver\",\n  \"SkyBlue\",\n  \"SlateBlue\",\n  \"SlateGray\",\n  \"SlateGrey\",\n  \"Snow\",\n  \"SpringGreen\",\n  \"SteelBlue\",\n  \"Tan\",\n  \"Teal\",\n  \"Thistle\",\n  \"Tomato\",\n  \"Turquoise\",\n  \"Violet\",\n  \"Wheat\",\n  \"White\",\n  \"WhiteSmoke\",\n  \"Yellow\",\n  \"YellowGreen\",\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    < Typeahead list={colorsList} />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}